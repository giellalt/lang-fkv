#!/bin/bash
# @configure_input@

# Automake interprets the exit status as follows:
# - an exit status of 0 will denote a success
# - an exit status of 77 a skipped test
# - an exit status of 99 a hard error
# - any other exit status will denote a failure.

# To run this test script only, do:
#
# make check TESTS=generate-adjective-lemmas.sh

# This test script will test that all adjective lemmas do generate as themselves.
# Extend as needed, and copy to new files to adapt to other parts of speech.
# The changes usually needed are:
#
# 1. change the reference to the source file (line 23)
# 2. extend the extract lemmas egrep expression (lines 53 ff)
# 3. adapt the tag addition and lemma generation instructions (lines 79 ff)

###### Variables: #######
POS=adjectives
### in ###
source_file=${srcdir}/../stems/${POS}.lexc
generator_file=./../../generator-gt-norm
analyser_file=./../../analyser-gt-norm

### out ###
# Temporary files:
lemmas=./filtered_${POS}.txt
lemmas_attr=./filtered_attr_${POS}.txt
all_adjs=./filtered_all_${POS}.txt
# Result files, will get filename suffix programmatically further down:
generated_lemmas=./generated_${POS}
result_file=missing_${POS}_lemmas
gen_result_file=generated_missing_${POS}_lemmas
ana_result_file=analysed_missing_${POS}_lemmas

# SKIP if source file does not exist (works with both single and
# multiple files):
if [ ! `ls -1 $source_file 2>/dev/null | wc -l ` -gt 0 ]; then
    echo
    echo "*** Warning: Source file(s) $source_file not found."
    echo
    exit 77
fi

# Use autotools mechanisms to only run the configured fst types in the tests:
fsttype=
@CAN_HFST_TRUE@fsttype="$fsttype hfst"
@CAN_XFST_TRUE@fsttype="$fsttype xfst"

# Exit if both hfst and xerox have been shut off:
if test -z "$fsttype" ; then
    echo "All transducer types have been shut off at configure time."
    echo "Nothing to test. Skipping."
    exit 77
fi

# Get external Mac editor for viewing failed results from configure:
EXTEDITOR=@SEE@

##### Extract lemmas - add additional egrep pattern as parameters: #####
##### --include "(pattern1|pattern2|...)"                          #####
##### --exclude "(pattern1|pattern2|...)"                          #####

# 1. Those which can be generated with +A+Sg+Nom (most adjectives)
@GTCORE@/scripts/extract-lemmas.sh \
    --exclude "(CmpN/Last|IRTI)" \
    $source_file > $lemmas

# 2. plural lemmas (none yet)

# 3. lemmas with only an attribute form
@GTCORE@/scripts/extract-lemmas.sh \
    --include "(IRTI)" \
    --exclude "(CmpN/Last)" \
    $source_file > $lemmas_attr

# 4. Lemmas which need a comparative tag (none yet)

# 5. Lemmas which need a superlative tag (none yet)

###### Start testing: #######
transducer_found=0
Fail=0

# The script tests both Xerox and Hfst transducers if available:
for f in $fsttype; do
    if [ $f == "xfst" ]; then
        lookup_tool="@LOOKUP@ -flags mbTT"
        suffix="xfst"
        # Does lookup support -q / quiet mode?
        lookup_quiet=$($lookup_tool -q 2>&1 | grep USAGES)
        if ! [[ $lookup_quiet == *"USAGES"* ]] ; then
            # it does support quiet mode, add the -q flag:
            lookup_tool="@LOOKUP@ -q -flags mbTT"
        fi
    elif [ $f == "hfst" ]; then
        lookup_tool="@HFST_OPTIMIZED_LOOKUP@ -q"
        suffix="hfstol"
    else
        Fail=1
        printf "ERROR: Unknown fst type! "
        echo "$f - FAIL"
        continue
    fi
    if [ -f "$generator_file.$suffix" ]; then
        let "transducer_found += 1"

###### Test generation: #######
        # generate adjectives, extract the resulting generated lemma,
		# store it:

# Generate

# 1. with +A+Sg+Nom
# Generer lemmaer i adjectives med +A+Sg+Nom, lagre i generated-adjectives
        sed 's/$/+A+Sg+Nom/' $lemmas | $lookup_tool $generator_file.$suffix | \
          cut -f2 | grep -v "A+" | grep -v "^$" | sort -u > $generated_lemmas.$f.txt		

# 2. with +A+Pl+Nom (none yet)

# 3. with +A+Attr
        sed 's/$/+A+Attr/' $lemmas_attr | $lookup_tool $generator_file.$suffix | \
          cut -f2 | grep -v "A+" | grep -v "^$" | sort -u >> $generated_lemmas.$f.txt

# 4. with +A+Comp+Sg+Nom

# 5. with +A+Superl+Sg+Nom

###### Collect results: #######
		# Sort and compare original input with resulting output - the diff is
		# stored and opened in SEE:

# Gather all lemmas in one file, sort, unify
    cat $lemmas $lemmas_attr > $all_adjs
	LC_ALL=no_NO.UTF8 sort -u -o $all_adjs $all_adjs 
	LC_ALL=no_NO.UTF8 sort -u -o $generated_lemmas.$f.txt $generated_lemmas.$f.txt 

# Sammenlikne: Former som er i lemmalista med ikke i lista med genererte former,
# lagre i missingadjectiveLemmas.txt. Formene genereres med  +A+Sg+Nom for enklere debugging.
		LC_ALL=no_NO.UTF8 comm -23 $all_adjs $generated_lemmas.$f.txt |\
		grep -v '^$' | sed 's/$/+A+Sg+Nom/' |\
		$lookup_tool $generator_file.$suffix > $result_file.$f.txt

		# Open the diff file in SubEthaEdit (if there is a diff):
		if [ -s $result_file.$f.txt ]; then
			# Only open the failed lemmas in see if @SEE@ is defined:
			if [ "$EXTEDITOR" ]; then
				$EXTEDITOR $result_file.$f.txt
            else
                echo "There were problem lemmas. Details in:"
                echo "* $result_file.$f.txt    "
			fi
		    Fail=1
		    echo "$f - FAIL"
		    continue
		fi
	    echo "$f - PASS"
	fi
done

# At least one of the Xerox or HFST tests failed:
if [ "$Fail" = "1" ]; then
	exit 1
fi

if [ $transducer_found -eq 0 ]; then
    echo ERROR: No transducer found $analyser_file $generator_file
    exit 77
fi

# When done, remove the generated data files:
rm -f $lemmas $lemmas_attr $all_adjs
